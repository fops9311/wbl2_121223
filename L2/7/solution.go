package fanin

import "sync"

/*
Этот фрагмент кода реализует функцию Fan In, которая принимает на вход несколько каналов (обозначаемых через параметр channels) и возвращает объединенный канал (<-chan interface{}). Объединенный канал представляет собой канал, который будет содержать элементы всех входных каналов.

Функция начинает работу с создания выходного канала (out) и инициализации счетчика рабочих потоков (wg из пакета sync).

Затем функция проходит по каждому входному каналу (for i := range channels), создает новый рабочий поток (go func()) и добавляет его в счетчик (wg.Add(1)). Рабочий поток прослушивает значения входного канала (for v := range channels[i]) и отправляет их на объединенный выходной канал (out <- v). После отправки каждого значения рабочий поток завершается (wg.Done()).

В конце функции еще один рабочий поток вызывается асинхронно (go func() {...}), который ожидает завершения всех рабочих потоков (wg.Wait()) и закрывает объединенный выходной канал (close(out)).

Таким образом, объединенный выходной канал будет содержать все элементы входных каналов и будет закрыт после того, как все входные данные будут обработаны.

Комментарииии любезно предоставлены YandexGPT2
*/
func FanIn(channels ...<-chan interface{}) <-chan interface{} {
	out := make(chan interface{})
	var wg sync.WaitGroup
	for i := range channels {
		wg.Add(1)
		go func(i int) {
			for v := range channels[i] {
				out <- v
			}
			wg.Done()
		}(i)
	}
	go func() {
		wg.Wait()
		close(out)
	}()

	return out
}
